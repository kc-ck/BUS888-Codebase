# -*- coding: utf-8 -*-
"""Session5_KNN_Iris.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18kg4POGXUngiuCFj5WWuyUiO2JZ0ga8D
"""

# import necessary libraries
import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')

# Load the dataset
iris = load_iris()

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.4, random_state=42)

print(len(X_train))
print(len(X_test))

# Train the kNN classifier with k=5
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

# Calculate the accuracy on the test set
accuracy = knn.score(X_test, y_test)
print('Accuracy on test set:', accuracy)

"""### Plot function of accuracy against different k values"""

# Train the kNN classifier
k_range = range(1, 50)
scores = []
for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    scores.append(knn.score(X_test, y_test))

# Plot the regression
plt.plot(k_range, scores)
plt.xlabel('Number of Neighbors')
plt.ylabel('Accuracy')
plt.show()

"""### Plotting decision boundaries with reduced dimensions"""

# Extract the first two features for visualization
X = iris.data[:, :2]
y = iris.target

# Train the kNN classifier with k=3
knn = KNeighborsClassifier(n_neighbors=50)
knn.fit(X, y)

# Create a meshgrid to plot the decision boundary
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1), np.arange(y_min, y_max, 0.1))
Z = knn.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

# Plot the decision boundary
plt.contourf(xx, yy, Z, alpha=0.4)
plt.scatter(X[:, 0], X[:, 1], c=y, s=20, edgecolor='k')
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.title('kNN decision boundary (k=50)')
plt.show()

"""TODO: Change the parameters (k) and different variables and visualize the decision boundary"""